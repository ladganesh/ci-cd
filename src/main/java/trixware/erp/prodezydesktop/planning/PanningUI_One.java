/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trixware.erp.prodezydesktop.planning;

import java.awt.Dimension;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import org.json.JSONArray;
import org.json.JSONObject;
import java.math.RoundingMode;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import trixware.erp.prodezydesktop.Model.StaticValues;
import trixware.erp.prodezydesktop.components.DateSelectionForm;
import trixware.erp.prodezydesktop.components.ProgressDialog;
import trixware.erp.prodezydesktop.web_services.WebAPITester;


/**
 *
 * @author Rajesh
 */
public class PanningUI_One extends javax.swing.JPanel {

    ArrayList<String> years ;
    DateSelectionForm dsf_FromDate , dsf_ToDate ;
    Vector<String> columnNames2 = new Vector<String> ();
    ArrayList<String[]> shiftData = null;
    int totalNoOfDaysForPlanning , weekOffCount = 0;
    String weekOff ;
    double totalShiftHours = 0.0;
    DecimalFormat df = new DecimalFormat("#.##");
    
    JSONObject planningData = new JSONObject() ;
    JSONObject plantData = new JSONObject() ;
    JSONObject machineTypeData = new JSONObject() ;
    JSONObject partsData = new JSONObject() ;
    JSONObject processData = new JSONObject() ;
    JSONObject machinesData = new JSONObject() ;
    
    
    
    /**
     * Creates new form PanningUI_One
     */
    public PanningUI_One () {
        initComponents ();
        
        df.setRoundingMode( RoundingMode.DOWN );
        
        dsf_FromDate = new DateSelectionForm ("From Date" , true, "Please select valid date");
        dsf_FromDate.setBounds(  110,0,267,64);
        add( dsf_FromDate ) ;
        
        dsf_ToDate = new DateSelectionForm ("To Date" , true, "Please select valid date");
        dsf_ToDate.setBounds(  387,0,267,64);
        add( dsf_ToDate ) ;
        
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        customScrollPane11 = new components.CustomScrollPane1();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        customScrollPane12 = new components.CustomScrollPane1();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        customScrollPane13 = new components.CustomScrollPane1();
        jSeparator4 = new javax.swing.JSeparator();
        customScrollPane14 = new components.CustomScrollPane1();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel25 = new javax.swing.JLabel();
        customScrollPane15 = new components.CustomScrollPane1();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1100, 550));
        setLayout(null);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Create Plan");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(960, 500, 110, 32);

        jLabel1.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel1.setText("<html>Planning<br>Duration</html>");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        add(jLabel1);
        jLabel1.setBounds(10, 6, 100, 40);

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jButton2.setText("Next >>");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(770, 10, 80, 32);

        jLabel2.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        add(jLabel2);
        jLabel2.setBounds(750, 10, 10, 50);

        jLabel3.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel3.setText("<html>Machine<br>Availability</html>");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        add(jLabel3);
        jLabel3.setBounds(10, 70, 100, 40);

        jSeparator1.setBackground(new java.awt.Color(102, 102, 102));
        add(jSeparator1);
        jSeparator1.setBounds(10, 60, 1080, 3);

        customScrollPane11.setBackground(new java.awt.Color(255, 255, 255));
        add(customScrollPane11);
        customScrollPane11.setBounds(120, 70, 800, 44);

        jSeparator2.setBackground(new java.awt.Color(102, 102, 102));
        add(jSeparator2);
        jSeparator2.setBounds(10, 120, 1080, 3);

        jLabel4.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel4.setText("<html>Parts Total<br>Order Qty<br>& Req. Time</html>");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        add(jLabel4);
        jLabel4.setBounds(10, 130, 100, 60);

        customScrollPane12.setBackground(new java.awt.Color(255, 255, 255));
        add(customScrollPane12);
        customScrollPane12.setBounds(120, 130, 800, 70);

        jSeparator3.setBackground(new java.awt.Color(102, 102, 102));
        add(jSeparator3);
        jSeparator3.setBounds(10, 203, 1080, 3);

        jLabel5.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel5.setText("<html>Requied<br>Process<br>Time</html>");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        add(jLabel5);
        jLabel5.setBounds(10, 210, 100, 60);

        customScrollPane13.setBackground(new java.awt.Color(255, 255, 255));
        add(customScrollPane13);
        customScrollPane13.setBounds(120, 210, 800, 70);

        jSeparator4.setBackground(new java.awt.Color(102, 102, 102));
        add(jSeparator4);
        jSeparator4.setBounds(10, 283, 1080, 3);

        customScrollPane14.setBackground(new java.awt.Color(255, 255, 255));
        add(customScrollPane14);
        customScrollPane14.setBounds(120, 290, 800, 70);

        jLabel6.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel6.setText("<html>Required<br>Machining<br>Time</html>");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        add(jLabel6);
        jLabel6.setBounds(10, 290, 100, 60);

        jLabel7.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 153, 153));
        jLabel7.setText("Total Working days");
        add(jLabel7);
        jLabel7.setBounds(890, 0, 130, 16);

        jLabel8.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(51, 51, 51));
        jLabel8.setText("....");
        add(jLabel8);
        jLabel8.setBounds(1010, 0, 60, 20);

        jLabel9.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 153, 153));
        jLabel9.setText("Total Working Hours");
        add(jLabel9);
        jLabel9.setBounds(890, 20, 130, 16);

        jLabel10.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("....");
        add(jLabel10);
        jLabel10.setBounds(1010, 20, 60, 20);

        jLabel11.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 153, 153));
        jLabel11.setText("Total Shifts");
        add(jLabel11);
        jLabel11.setBounds(890, 43, 130, 16);

        jLabel12.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(51, 51, 51));
        jLabel12.setText("....");
        add(jLabel12);
        jLabel12.setBounds(1010, 40, 60, 20);

        jLabel13.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 153, 153));
        jLabel13.setText("<html>Total Machine<br>Availability</html>");
        add(jLabel13);
        jLabel13.setBounds(930, 70, 70, 50);

        jLabel14.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(51, 51, 51));
        jLabel14.setText("....");
        add(jLabel14);
        jLabel14.setBounds(1010, 80, 60, 20);

        jLabel15.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(153, 153, 153));
        jLabel15.setText("<html>Est. Order<br>Completion<br>Time Req.</html>");
        add(jLabel15);
        jLabel15.setBounds(930, 130, 70, 60);

        jLabel16.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(51, 51, 51));
        jLabel16.setText("....");
        add(jLabel16);
        jLabel16.setBounds(1010, 150, 60, 20);

        jLabel17.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(153, 153, 153));
        jLabel17.setText("<html>Est. Total<br>Processing<br>Time Req.</html>");
        add(jLabel17);
        jLabel17.setBounds(930, 210, 70, 60);

        jLabel18.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(51, 51, 51));
        jLabel18.setText("....");
        add(jLabel18);
        jLabel18.setBounds(1010, 230, 60, 20);

        jLabel19.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(153, 153, 153));
        jLabel19.setText("<html>Est. Total<br>Machining<br>Time Req.</html>");
        add(jLabel19);
        jLabel19.setBounds(930, 300, 70, 60);

        jLabel20.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(51, 51, 51));
        jLabel20.setText("....");
        add(jLabel20);
        jLabel20.setBounds(1010, 310, 60, 25);

        jLabel21.setFont(new java.awt.Font("Leelawadee UI", 0, 10)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(153, 153, 153));
        jLabel21.setText("<html>Shifts</html>");
        add(jLabel21);
        jLabel21.setBounds(1010, 100, 30, 10);

        jLabel22.setFont(new java.awt.Font("Leelawadee UI", 0, 10)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(153, 153, 153));
        jLabel22.setText("<html>Shifts</html>");
        add(jLabel22);
        jLabel22.setBounds(1010, 330, 30, 20);

        jLabel23.setFont(new java.awt.Font("Leelawadee UI", 0, 10)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(153, 153, 153));
        jLabel23.setText("<html>Shifts</html>");
        add(jLabel23);
        jLabel23.setBounds(1010, 250, 30, 10);

        jLabel24.setFont(new java.awt.Font("Leelawadee UI", 0, 10)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(153, 153, 153));
        jLabel24.setText("<html>Shifts</html>");
        add(jLabel24);
        jLabel24.setBounds(1010, 170, 30, 10);

        jSeparator5.setBackground(new java.awt.Color(102, 102, 102));
        add(jSeparator5);
        jSeparator5.setBounds(10, 364, 1080, 3);

        jLabel25.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel25.setText("<html>Profitability</html>");
        jLabel25.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        add(jLabel25);
        jLabel25.setBounds(10, 370, 100, 60);

        customScrollPane15.setBackground(new java.awt.Color(255, 255, 255));
        add(customScrollPane15);
        customScrollPane15.setBounds(120, 370, 800, 70);

        jLabel26.setFont(new java.awt.Font("Leelawadee UI", 0, 12)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(153, 153, 153));
        jLabel26.setText("<html>Total Cost<br>Total Value<br>Est. Profit</html>");
        add(jLabel26);
        jLabel26.setBounds(930, 370, 70, 70);

        jLabel27.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(51, 51, 51));
        jLabel27.setText("....");
        add(jLabel27);
        jLabel27.setBounds(1010, 410, 60, 20);

        jLabel28.setFont(new java.awt.Font("Leelawadee UI", 0, 10)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(153, 153, 153));
        jLabel28.setText("<html>Shifts</html>");
        add(jLabel28);
        jLabel28.setBounds(1010, 390, 30, 30);

        jLabel29.setFont(new java.awt.Font("Leelawadee UI", 0, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(51, 51, 51));
        jLabel29.setText("....");
        add(jLabel29);
        jLabel29.setBounds(1010, 375, 60, 20);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        showPlanningDialog ();
        
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        
        showDialog() ;
        
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    
    public void loadContentPlant () {
        
        weekOffCount = 0;
        
        columnNames2 = new Vector<String> ();
        columnNames2.add ( "shiftfromtime" );
        columnNames2.add ( "shifttotime" );
        columnNames2.add ( "breakduration" );
        
        
        String getShiftforPlant;
        getShiftforPlant = "shifts?plant_id=1";
        
         String shiftResult = WebAPITester.prepareWebCall ( getShiftforPlant , StaticValues.getHeader () , "" );

        if ( shiftResult != null && ! shiftResult.contains ( "not found" ) ) {

            JSONObject jObject2 = new JSONObject ( shiftResult );
            shiftResult = jObject2.get( "data" ).toString() ;
            jObject2 =  new JSONObject ( shiftResult );
            shiftResult = jObject2.get( "records" ).toString() ;
            JSONArray records2 = jObject2.getJSONArray ( "records" );
            
            JSONObject shifts = null;

            shiftData = new ArrayList<String[]> () ;
            
            System.out.println ( "Shift Information" );
            for ( int i = 0 ; i < records2.length () ; i ++ ) {
                shifts = records2.getJSONObject ( i );
                String[] data = new String[3] ;
                for ( int columnIndex = 0 ; columnIndex < columnNames2.size () ; columnIndex ++ ) {
                        
                    data[columnIndex] = shifts.get( columnNames2.get(columnIndex )).toString() ;
                    
                }
                shiftData.add(  data  ) ;
            }
            
            int totalShiftsTime = 0; 
            
            for ( int i = 0 ; i < shiftData.size() ; i ++ ) {
                try{
                    Date d1 = new SimpleDateFormat( "HH:mm:ss" ).parse ( shiftData.get(i)[0].replace( "0000-00-00 ", "" )  ) ;
                    Date d2 = new SimpleDateFormat( "HH:mm:ss" ).parse ( shiftData.get(i)[1].replace( "0000-00-00 ", "" ) ) ;
                    
                    int time = (int) ((((d2.getTime() - d1.getTime())/1000)/60))  ;
                    int breakMinutes = Integer.parseInt( shiftData.get(i)[2] ) ;
                    
                    totalShiftsTime =  totalShiftsTime + time + breakMinutes ;
                    
                }catch(ParseException e){
                    System.err.println ( ""+e.getMessage() );
                }
                
            }
            
            //  total nos of hours in one shift exclusing break time
            totalShiftHours = (int)(totalShiftsTime / 60) -  Double.parseDouble(  df.format( (totalShiftsTime % 60)/60.0) );
         
            plantData.put ( "HoursInAShift",  totalShiftHours) ;
        }
        
        
        String addEmpAPICall = "plants";
        String result2 = WebAPITester.prepareWebCall ( addEmpAPICall , StaticValues.getHeader () , "" );

        if ( result2 != null &&  ! result2.contains( "not found")) {

            JSONObject jObject2 = new JSONObject ( result2 );
            result2 = jObject2.get( "data" ).toString() ;
            jObject2 =  new JSONObject ( result2 );
            result2 = jObject2.get( "records" ).toString() ;
            JSONArray records = jObject2.getJSONArray ( "records" );
            
            JSONObject emp = null;
            
            for ( int i = 0 ; i < records.length () ; i ++ ) {
                    emp = records.getJSONObject ( i );
                    weekOff = emp.get ( "plantweekoff" ).toString()   ;
            }
        }
        
        Date fromDate, toDate1, toDate2 ;
        
        fromDate = dsf_FromDate.getSelectedDate () ;
        toDate1 = dsf_ToDate.getSelectedDate () ;
        toDate2 = dsf_ToDate.getSelectedDate () ;
        
        
        if(toDate1.getMonth () == 12){
            toDate1.setDate (  1  );
            toDate1.setMonth (  toDate1.getMonth ()+1  );
            toDate1.setYear (  toDate1.getYear ()+1  );
        }else{
            toDate1.setDate (  1  );
            toDate1.setMonth (  toDate1.getMonth ()+1  );
        }
                
        totalNoOfDaysForPlanning = (int) (((((toDate1.getTime() - fromDate.getTime())/1000)/60)/60)/24) ;
        
        
//        int startDate = fromDate.getDate (); 
//        int endDate = toDate2.getDate (); 
        long startDate = fromDate.getTime() ; 
        long endDate = toDate2.getTime(); 
        
        SimpleDateFormat dayNameFormat = new SimpleDateFormat(  "EEEE" ) ;
        
        for(  long i = startDate ; i <= endDate ;    ){
            
            String weekOff2 = dayNameFormat.format ( fromDate);
            
            if(  weekOff.equalsIgnoreCase (   weekOff2  )  ){
                weekOffCount++ ;
            }
            
            fromDate.setTime (    86400000  +  fromDate.getTime()  );
            i = i  + 86400000  ;
        }
        
        totalNoOfDaysForPlanning = totalNoOfDaysForPlanning - weekOffCount ;
        plantData.put ( "PlanningDuration-Days",  totalNoOfDaysForPlanning) ;
        plantData.put ( "PlanningDuration-Holidays",  weekOffCount) ;
        
     //   jLabel2.setText( "<html>Total working days : "+totalNoOfDaysForPlanning+"<br>Total working hours : "+( totalShiftHours * totalNoOfDaysForPlanning ) +"</html>"   );
        jLabel7.setText(  "<html>Total working days : </html>"  );
        jLabel9.setText(  "<html>Total working hours : </html>"  );
        jLabel11.setText(  "<html>Total Shifts : </html>"  );
        
        jLabel8.setText(  ""+totalNoOfDaysForPlanning  );
        jLabel10.setText(  ""+( totalShiftHours * totalNoOfDaysForPlanning )  );
        jLabel12.setText(  ""+ ( (totalShiftHours * totalNoOfDaysForPlanning) / totalShiftHours  )  );
     
        plantData.put ( "PlanningDuration-WorkingHOurs",  ( totalShiftHours * totalNoOfDaysForPlanning ) ) ;

        
        planningData.put (  "PlantData" , plantData ) ;
        
    }
    
    public void loadMachineAvailability(){
        
        JSONArray machineTypeDataList = new JSONArray() ;
        
        String machineAvailabilityCall = "getMachineAvail?freq=type";
        String result2 = WebAPITester.prepareWebCall ( machineAvailabilityCall , StaticValues.getHeader () , "" );

        double grandMchAvl = 0.0 ;
        
        if ( result2 != null &&  ! result2.contains( "not found")) {

            JSONObject jObject2 = new JSONObject ( result2 );
            result2 = jObject2.get( "data" ).toString() ;
            jObject2 =  new JSONObject ( result2 );
            JSONArray records = jObject2.getJSONArray ( "total_avl" );
            JSONArray records2 = jObject2.getJSONArray ( "records" );
            
            JSONObject emp = null  , mch = null ;

            JPanel panel = new JPanel ();
            panel.setLayout ( new BoxLayout ( panel , BoxLayout.X_AXIS ) );
            customScrollPane11.setVerticalScrollBarPolicy ( JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED );
            customScrollPane11.setHorizontalScrollBarPolicy ( JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED );
            customScrollPane11.setViewportView( panel ) ;
            
            JSONArray machinesList = new JSONArray ();
            
            for ( int i = 0 ; i < records.length () ; i ++ ) {
                    emp = records.getJSONObject (  i );
                    mch = records2.getJSONObject( i ) ;
                    
                    JPanel machineAvlPanel = new JPanel();
                    machineAvlPanel.setPreferredSize ( new Dimension (100, 39));
                    machineAvlPanel.setLayout ( new BoxLayout ( machineAvlPanel , BoxLayout.Y_AXIS ) );
                    
                    JLabel jLabel9 = new JLabel() ; 
                    JLabel jLabel10 = new JLabel();
                    
                    jLabel9.setBackground(new java.awt.Color(51, 51, 51));
                    jLabel9.setFont(new java.awt.Font("Leelawadee UI", 1, 13)); // NOI18N
                    jLabel9.setForeground(new java.awt.Color(51, 51, 51));
                    machineAvlPanel.add(jLabel9);
                    jLabel9.setBounds(10, 0, 100, 21);
                    jLabel9.setText(  "  "+emp.get ( "Type" ).toString() );
                
                    
                    jLabel10.setBackground(new java.awt.Color(102, 102, 102));
                    jLabel10.setFont(new java.awt.Font("Leelawadee UI", 1, 10)); // NOI18N
                    jLabel10.setForeground(new java.awt.Color(102, 102, 102));
                    machineAvlPanel.add(jLabel10);
                    jLabel10.setBounds(10, 22, 100, 17);
                    
                    //jLabel10.setText( "   "+ df.format(( Double.parseDouble( emp.get ( "Avl_Hrs" ).toString()) * (totalNoOfDaysForPlanning*1.0) )/totalShiftHours) +" Shifts.  "  );
                    jLabel10.setText( "   "+ df.format((  (totalNoOfDaysForPlanning*1.0) )/totalShiftHours) +" Shifts.  "  );
                    
                    //grandMchAvl = grandMchAvl  +  Double.parseDouble( emp.get ( "Avl_Hrs" ).toString()) * (totalNoOfDaysForPlanning*1.0) ;
                    grandMchAvl = grandMchAvl  +  (totalNoOfDaysForPlanning*1.0) ;
                    
                    panel.add( machineAvlPanel ) ;
                    
            }
            
            for ( int i = 0 ; i < records2.length () ; i ++ ) {
                mch = records2.getJSONObject( i ) ;
            
                machinesData = new JSONObject() ;
                
                machinesData.put(  "mid",    mch.get ( "ID" ).toString()    );
                machinesData.put(  "name",    mch.get ( "Name" ).toString()    );
                machinesData.put(  "davl",  mch.get ( "Avl_Hrs" ).toString()    );
                machinesData.put(  "max-hours",  totalShiftHours   );
                machinesData.put(  "type",    mch.get ( "Type" ).toString()    );

                machinesList.put(  i  , machinesData);
                machineTypeDataList.put(  mch  ) ;
            }
            
            machineTypeData.put( "MachineAvail-Type", machineTypeDataList   ) ;
            
            machinesData = new JSONObject() ;
            machinesData.put(   "MachinessList", machinesList   ) ;
            
            planningData.put (  "MachineData" , machinesData ) ;
            
            jLabel14.setText(   ""+df.format(grandMchAvl/ totalShiftHours )+""  ) ;
        }
    }

    public ArrayList<String[]> productTime = new ArrayList<String[]>() ;
    public ArrayList<String[]> processTime = new ArrayList<String[]>() ;
    public ArrayList<String[]> machineTime = new ArrayList<String[]>() ;
    
    public void loadPartProdTime(){

        productTime = new ArrayList<String[]>() ;
        String machineAvailabilityCall = "getTotalCycleTime";
        String result2 = WebAPITester.prepareWebCall ( machineAvailabilityCall , StaticValues.getHeader () , "" );

        if ( result2 != null &&  ! result2.contains( "not found")) {

            JSONObject jObject2 = new JSONObject ( result2 );
            result2 = jObject2.get( "data" ).toString() ;
            jObject2 =  new JSONObject ( result2 );
            JSONArray records = jObject2.getJSONArray ( "records" );
            
            JSONObject emp = null;
            
            for ( int i = 0 ; i < records.length () ; i ++ ) {
                    emp = records.getJSONObject ( i );
                    
                    int partId = Integer.parseInt( emp.get ( "part" ).toString() );
                    String partnm =  emp.get ( "pnm" ).toString() ;
                    double cycleTime  ;
                    
                    try{
                        cycleTime  =   Double.parseDouble( emp.get ( "cycle_time" ).toString() ) ;
                    }catch( Exception e ){
                        cycleTime  =   Integer.parseInt( emp.get ( "cycle_time" ).toString() ) * 1.0;    
                    }
                    productTime.add (   new String[]{  partId+"" ,  cycleTime+""  ,  partnm}   ) ;    
            }
        }
    }
    
    public void loadPartOrderQty(){
        
        String machineAvailabilityCall = "getOrderedQuantities";
        String result2 = WebAPITester.prepareWebCall ( machineAvailabilityCall , StaticValues.getHeader () , "" );

        if ( result2 != null &&  ! result2.contains( "not found")) {

            JSONObject jObject2 = new JSONObject ( result2 );
            result2 = jObject2.get( "data" ).toString() ;
            jObject2 =  new JSONObject ( result2 );
            JSONArray records = jObject2.getJSONArray ( "records" );
            
            JSONObject emp = null;

            JPanel panel = new JPanel ();
            panel.setLayout ( new BoxLayout ( panel , BoxLayout.X_AXIS ) );
            customScrollPane12.setVerticalScrollBarPolicy ( JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED );
            customScrollPane12.setHorizontalScrollBarPolicy ( JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED );
            customScrollPane12.setViewportView( panel ) ;
                        
            
            ArrayList<String[]> productQtyValue = new ArrayList<String[]>() ;
            
            for ( int i = 0 ; i < records.length () ; i ++ ) {
                    emp = records.getJSONObject ( i );
                    
                    int partId = Integer.parseInt( emp.get ( "part" ).toString() );
                    double partQty  , orderValue;
                    
                    String pname = emp.get ( "pnm" ).toString() ;
                    
                    try{
                        partQty  =   Double.parseDouble( emp.get ( "Qty" ).toString() );
                    }catch( Exception e ){
                        partQty  =   Integer.parseInt( emp.get ( "Qty" ).toString() ) * 1.0;    
                    }
                    
                    try{
                        orderValue  =   Double.parseDouble( emp.get ( "Value" ).toString() );
                    }catch( Exception e ){
                        orderValue  =   Integer.parseInt( emp.get ( "Value" ).toString() ) * 1.0;    
                    }
                    
                    productQtyValue.add (   new String[]{  partId+"" ,  partQty+"" ,  orderValue+""  , pname }   ) ;    
                    
            }
            
            for( int j=0 , k=1  ; j < productQtyValue.size()-1  &&  k < productQtyValue.size()  ;  j++ , k++ ){

                int partId1 = Integer.parseInt( productQtyValue.get( j )[0] ) ;
                int partId2 = Integer.parseInt( productQtyValue.get( k )[0] ) ;

                if(  partId1  ==  partId2   ){
                    productQtyValue.get( j )[2] = (Double.parseDouble( productQtyValue.get( j )[2]) +  Double.parseDouble( productQtyValue.get( k )[2])   ) +"";
                    productQtyValue.get( j )[1] = (Double.parseDouble( productQtyValue.get( j )[1] ) +  Double.parseDouble( productQtyValue.get( k )[1])  ) +"";
                    productQtyValue.remove ( k );
                }
            }
            
            int partId ;
            double partQty = 0.0 , orderValue = 0.0 ;
            String pname ;
            
             double orderTotalTurnAroundTime = 0.0 ;
            
            for( int j=0; j < productQtyValue.size() ;  j++){
                        
                JPanel machineAvlPanel = new JPanel();
                machineAvlPanel.setPreferredSize ( new Dimension (100, 65));
                machineAvlPanel.setLayout ( new BoxLayout ( machineAvlPanel , BoxLayout.Y_AXIS ) );

                JLabel jLabel9 = new JLabel() ; 
                JLabel jLabel10 = new JLabel();
                JLabel jLabel11 = new JLabel();

                partId = Integer.parseInt( productQtyValue.get( j )[0] );
                orderValue =  Double.parseDouble( productQtyValue.get( j )[2] );
                partQty =   Double.parseDouble( productQtyValue.get( j )[1] );
                pname = productQtyValue.get( j )[3] ;
                
                jLabel9.setBackground(new java.awt.Color(51, 51, 51));
                jLabel9.setFont(new java.awt.Font("Leelawadee UI", 1, 13)); // NOI18N
                jLabel9.setForeground(new java.awt.Color(51, 51, 51));
                machineAvlPanel.add(jLabel9);
                jLabel9.setBounds(10, 0, 100, 21);
                jLabel9.setText(  "  "+pname );


                jLabel10.setBackground(new java.awt.Color(102, 102, 102));
                jLabel10.setFont(new java.awt.Font("Leelawadee UI", 1, 10)); // NOI18N
                jLabel10.setForeground(new java.awt.Color(102, 102, 102));
                machineAvlPanel.add(jLabel10);
                jLabel10.setBounds(10, 22, 100, 17);
                jLabel10.setText( "   "+ partQty +" Units.  "  );

               
                
                for(  int k = 0; k < productTime.size () ; k++   ){
                    
                    double orderTurnAroundTime = 0.0 ;
                    
                    int _partId = Integer.parseInt( productTime.get( k )[0] );
                    if(  _partId == partId  ){
                        
                        System.out.println ( "Order Qty   "+partQty );
                        System.out.println ( "total cycle time in min "+Double.parseDouble( productTime.get( k )[1] ) );
                        
                        orderTurnAroundTime = (partQty * Double.parseDouble( productTime.get( k )[1] ))/60;
                        
                        System.out.println ( "estimated production time for order  "+orderTurnAroundTime );
                        
                        jLabel11.setBackground(new java.awt.Color(102, 102, 102));
                        jLabel11.setFont(new java.awt.Font("Leelawadee UI", 1, 10)); // NOI18N
                        jLabel11.setForeground(new java.awt.Color(102, 102, 102));
                        machineAvlPanel.add(   jLabel11  );
                        jLabel11.setBounds(10, 22, 100, 17);
                        jLabel11.setText( "   "+ df.format(orderTurnAroundTime / totalShiftHours)   +" Shifts.  "  );
                        
                        orderTotalTurnAroundTime = orderTotalTurnAroundTime + orderTurnAroundTime ;
                    }
                }

                panel.add( machineAvlPanel ) ;
            }
            
            jLabel16.setText(   df.format( orderTotalTurnAroundTime / totalShiftHours )+""    ) ;
        }
    }
    
    public ArrayList<String[]> productCost = new ArrayList<String[]>() ;
    public ArrayList<String[]> productValue = new ArrayList<String[]>() ;
    
    public void loadPartOrderCostValue(){
        
        String machineAvailabilityCall = "getOrderedQuantities";
        String result2 = WebAPITester.prepareWebCall ( machineAvailabilityCall , StaticValues.getHeader () , "" );

        if ( result2 != null &&  ! result2.contains( "not found")) {

            JSONObject jObject2 = new JSONObject ( result2 );
            result2 = jObject2.get( "data" ).toString() ;
            jObject2 =  new JSONObject ( result2 );
            JSONArray records = jObject2.getJSONArray ( "records" );
            
            JSONObject emp = null;

            JPanel panel = new JPanel ();
            panel.setLayout ( new BoxLayout ( panel , BoxLayout.X_AXIS ) );
            customScrollPane15.setVerticalScrollBarPolicy ( JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED );
            customScrollPane15.setHorizontalScrollBarPolicy ( JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED );
            customScrollPane15.setViewportView( panel ) ;
                        
            
            ArrayList<String[]> productQtyValue = new ArrayList<String[]>() ;
            
            for ( int i = 0 ; i < records.length () ; i ++ ) {
                    emp = records.getJSONObject ( i );
                    
                    int partId = Integer.parseInt( emp.get ( "part" ).toString() );
                    double partQty  , orderValue;
                    
                    String pname = emp.get ( "pnm" ).toString() ;
                    
                    try{
                        partQty  =   Double.parseDouble( emp.get ( "Cost" ).toString() );
                    }catch( Exception e ){
                        partQty  =   Integer.parseInt( emp.get ( "Cost" ).toString() ) * 1.0;    
                    }
                    
                    try{
                        orderValue  =   Double.parseDouble( emp.get ( "Value" ).toString() );
                    }catch( Exception e ){
                        orderValue  =   Integer.parseInt( emp.get ( "Value" ).toString() ) * 1.0;    
                    }
                    
                    productQtyValue.add (   new String[]{  partId+"" ,  partQty+"" ,  orderValue+""  , pname }   ) ;    
                    
            }
            
            for( int j=0 , k=1  ; j < productQtyValue.size()-1  &&  k < productQtyValue.size()  ;  j++ , k++ ){

                int partId1 = Integer.parseInt( productQtyValue.get( j )[0] ) ;
                int partId2 = Integer.parseInt( productQtyValue.get( k )[0] ) ;

                if(  partId1  ==  partId2   ){
                    productQtyValue.get( j )[2] = (Double.parseDouble( productQtyValue.get( j )[2]) +  Double.parseDouble( productQtyValue.get( k )[2])   ) +"";
                    productQtyValue.get( j )[1] = (Double.parseDouble( productQtyValue.get( j )[1] ) +  Double.parseDouble( productQtyValue.get( k )[1])  ) +"";
                    productQtyValue.remove ( k );
                }
            }
            
            int partId ;
            double partCost = 0.0 , orderValue = 0.0 ;
            String pname ;
            
            
            for( int j=0; j < productQtyValue.size() ;  j++){
                        
                JPanel machineAvlPanel = new JPanel();
                machineAvlPanel.setPreferredSize ( new Dimension (100, 65));
                machineAvlPanel.setLayout ( new BoxLayout ( machineAvlPanel , BoxLayout.Y_AXIS ) );

                JLabel jLabel9 = new JLabel() ; 
                JLabel jLabel10 = new JLabel();
                JLabel jLabel11 = new JLabel();
                JLabel jLabel12 = new JLabel();

                partId = Integer.parseInt( productQtyValue.get( j )[0] );
                orderValue =  Double.parseDouble( productQtyValue.get( j )[2] );
                partCost =   Double.parseDouble( productQtyValue.get( j )[1] );
                pname = productQtyValue.get( j )[3] ;
                
                jLabel9.setBackground(new java.awt.Color(51, 51, 51));
                jLabel9.setFont(new java.awt.Font("Leelawadee UI", 1, 13)); // NOI18N
                jLabel9.setForeground(new java.awt.Color(51, 51, 51));
                machineAvlPanel.add(jLabel9);
                jLabel9.setBounds(10, 0, 100, 21);
                jLabel9.setText(  "  "+pname );


                jLabel10.setBackground(new java.awt.Color(102, 102, 102));
                jLabel10.setFont(new java.awt.Font("Leelawadee UI", 1, 10)); // NOI18N
                jLabel10.setForeground(new java.awt.Color(102, 102, 102));
                machineAvlPanel.add(jLabel10);
                jLabel10.setBounds(10, 22, 100, 17);
                jLabel10.setText( "   "+ partCost +" Units.  "  );

                
                jLabel11.setBackground(new java.awt.Color(102, 102, 102));
                jLabel11.setFont(new java.awt.Font("Leelawadee UI", 1, 10)); // NOI18N
                jLabel11.setForeground(new java.awt.Color(102, 102, 102));
                machineAvlPanel.add(jLabel11);
                jLabel11.setBounds(10, 22, 100, 17);
                jLabel11.setText( "   "+ orderValue +" Units.  "  );

                
                jLabel12.setBackground(new java.awt.Color(102, 102, 102));
                jLabel12.setFont(new java.awt.Font("Leelawadee UI", 1, 10)); // NOI18N
                jLabel12.setForeground(new java.awt.Color(102, 102, 102));
                machineAvlPanel.add(jLabel12);
                jLabel12.setBounds(10, 22, 100, 17);
                jLabel12.setText( "   "+ (orderValue - partCost) +" Units.  "  );
                
                panel.add( machineAvlPanel ) ;
            }
            
        //    jLabel29.setText(   df.format( orderGrandTotalCost / totalShiftHours )+""    ) ;
        }
    }
    
    public void loadProcessProdTime(){

        ArrayList<String[]> processes = new ArrayList<String[]> () ;
        
        String processAvailabilityCall = "processes";
        String result2 = WebAPITester.prepareWebCall ( processAvailabilityCall , StaticValues.getHeader () , "" );

        if ( result2 != null &&  ! result2.contains( "not found")) {

            JSONObject jObject2 = new JSONObject ( result2 );
            result2 = jObject2.get( "data" ).toString() ;
            jObject2 =  new JSONObject ( result2 );
            JSONArray records = jObject2.getJSONArray ( "records" );
            
            JSONObject emp = null;
            
            for ( int i = 0 ; i < records.length () ; i ++ ) {
                    emp = records.getJSONObject ( i );
                    processes.add(  new String[]{ emp.get("PROCESS_ID").toString() , emp.get("PROCESS_NAME").toString() } ) ;
            }
        }
        
        ArrayList<String[]> machines = new ArrayList<String[]> () ;
        
        String machineAvailabilityCall = "machinestypes";
        String machineAvlData = WebAPITester.prepareWebCall ( machineAvailabilityCall , StaticValues.getHeader () , "" );

        if ( machineAvlData != null &&  ! machineAvlData.contains( "not found")) {

            JSONObject jObject2 = new JSONObject ( machineAvlData );
            machineAvlData = jObject2.get( "data" ).toString() ;
            jObject2 =  new JSONObject ( machineAvlData );
            JSONArray records = jObject2.getJSONArray ( "records" );
            
            JSONObject emp = null;
            
            for ( int i = 0 ; i < records.length () ; i ++ ) {
                    emp = records.getJSONObject ( i );
                    machines.add(  new String[]{ emp.get("MC_TYPE_ID").toString() , emp.get("MC_TYPE").toString() }   ) ;
            }
        }
        
        
        processTime = new ArrayList<String[]>() ;
        machineTime = new ArrayList<String[]>() ;
        
        machineAvailabilityCall = "getCycleTime";
        String ordersAndCycleTime = WebAPITester.prepareWebCall ( machineAvailabilityCall , StaticValues.getHeader () , "" );

        if ( ordersAndCycleTime != null &&  ! ordersAndCycleTime.contains( "not found")) {

            JSONObject jObject2 = new JSONObject ( ordersAndCycleTime );
            ordersAndCycleTime = jObject2.get( "data" ).toString() ;
            jObject2 =  new JSONObject ( ordersAndCycleTime );
            JSONArray records = jObject2.getJSONArray ( "records" );
            
            JSONObject emp = null;
            
            String processName ="";
            
            for ( int i = 0 ; i < processes.size() ; i ++ ) {
                
                double processTimeValue = 0.0 ;
                                
                for ( int j = 0 ; j < records.length() ; j ++ ) {
                    emp = records.getJSONObject ( j );
                    processName = emp.get("process_name").toString() ;
                    if( processes.get( i )[0].equals( emp.get("process").toString() ) )  {  
                        if( Integer.parseInt(  emp.get("order_qty").toString()  ) >0  )
                            processTimeValue = processTimeValue + (  ( Double.parseDouble(  emp.get("cycle_time").toString() ) /60  )  *  Double.parseDouble(  emp.get("order_qty").toString()  )   )   ;
                    }
                }
                processTime.add(  new String[]{ processes.get( i )[0] , df.format(processTimeValue)+"" ,  processes.get(i)[1]  });
            }
            loadProcessingTimePanel() ;

//---------------------------------------------------------------------------------------------------------------------            
            
            for ( int i = 0 ; i < machines.size() ; i ++ ) {
                
                double machineTimeValue = 0.0 ;
                                
                for ( int j = 0 ; j < records.length() ; j ++ ) {
                    emp = records.getJSONObject ( j );
                    
                    if( machines.get( i )[0].equals( emp.get("machine_id").toString() ) )  {  
                        if( Integer.parseInt(  emp.get("order_qty").toString()  ) >0  )
                            machineTimeValue = machineTimeValue + (  ( Double.parseDouble(  emp.get("cycle_time").toString() ) /60  )  *  Double.parseDouble(  emp.get("order_qty").toString()  )   )   ;
                    }
                }
                machineTime.add(  new String[]{ machines.get( i )[0] , df.format(machineTimeValue) +""  ,  machines.get( i )[1]   });
            }
            loadMachiningTimePanel() ;
            
        }
        
        hideDialog () ;
        
        //System.out.println ( "fdsdfsdfsfsdfsdf" );
        
    }

    ProgressDialog progress = new ProgressDialog(null);
    PlanningDialog planning = null;
    
    Thread getTableAndFilesContent = null;

    public boolean showDialog() {
        getTableAndFilesContent = new Thread() {
            public void run() {

               loadContentPlant( );
               loadMachineAvailability ();
               loadPartProdTime() ;
               loadPartOrderQty() ;
               loadProcessProdTime() ;
               loadPartOrderCostValue();
            }
        };
        getTableAndFilesContent.start();
        progress.openProgressWindow();
        return true;
    }

    public boolean hideDialog() {
        progress.closeProgressWindow();
        return true;
    }
     
    public void showPlanningDialog(){
        planning = new PlanningDialog(null ,  planningData );
        planning.openProgressWindow ();
    }
    
    public void hidePlanningDialog(){
        planning.closeProgressWindow ();
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private components.CustomScrollPane1 customScrollPane11;
    private components.CustomScrollPane1 customScrollPane12;
    private components.CustomScrollPane1 customScrollPane13;
    private components.CustomScrollPane1 customScrollPane14;
    private components.CustomScrollPane1 customScrollPane15;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    // End of variables declaration//GEN-END:variables

    
    public void loadProcessingTimePanel(){
        
            int partId ;
            String processName ;
            double partQty = 0.0 , orderValue = 0.0 ;
            
            JPanel panel = new JPanel ();
            panel.setLayout ( new BoxLayout ( panel , BoxLayout.X_AXIS ) );
            customScrollPane13.setVerticalScrollBarPolicy ( JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED );
            customScrollPane13.setHorizontalScrollBarPolicy ( JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED );
            customScrollPane13.setViewportView( panel ) ;
            
            
            double totalProcessingTime = 0.0 ;
            
            for( int j=0; j < processTime.size() ;  j++){
                        
                JPanel machineAvlPanel = new JPanel();
                machineAvlPanel.setPreferredSize ( new Dimension (100, 65));
                machineAvlPanel.setLayout ( new BoxLayout ( machineAvlPanel , BoxLayout.Y_AXIS ) );

                JLabel jLabel9 = new JLabel() ; 
                JLabel jLabel10 = new JLabel();
                JLabel jLabel11 = new JLabel();

                partId = Integer.parseInt( processTime.get( j )[0] );
                partQty =   Double.parseDouble( processTime.get( j )[1] );
                processName = processTime.get( j )[2] ;

                jLabel9.setBackground(new java.awt.Color(51, 51, 51));
                jLabel9.setFont(new java.awt.Font("Leelawadee UI", 1, 13)); // NOI18N
                jLabel9.setForeground(new java.awt.Color(51, 51, 51));
                machineAvlPanel.add(jLabel9);
                jLabel9.setBounds(10, 0, 100, 21);
                jLabel9.setText(  "  "+processName );

                jLabel10.setBackground(new java.awt.Color(102, 102, 102));
                jLabel10.setFont(new java.awt.Font("Leelawadee UI", 1, 10)); // NOI18N
                jLabel10.setForeground(new java.awt.Color(102, 102, 102));
                machineAvlPanel.add(jLabel10);
                jLabel10.setBounds(10, 22, 100, 17);
                jLabel10.setText( "   "+ df.format(partQty/ totalShiftHours ) +" Shifts  "  );

                totalProcessingTime = totalProcessingTime + partQty ;
                
//                jLabel11.setBackground(new java.awt.Color(102, 102, 102));
//                jLabel11.setFont(new java.awt.Font("Leelawadee UI", 1, 10)); // NOI18N
//                jLabel11.setForeground(new java.awt.Color(102, 102, 102));
//                machineAvlPanel.add(   jLabel11  );
//                jLabel11.setBounds(10, 22, 100, 17);
//                jLabel11.setText( "   " +  " Hrs.  "  );


                panel.add( machineAvlPanel ) ;
            }
        
            jLabel18.setText(   df.format(totalProcessingTime/ totalShiftHours )+"" +""  ) ;
    }
    
    public void loadMachiningTimePanel() {
        
            int partId ;
            String machineName ;
            double partQty = 0.0 , orderValue = 0.0 ;
            
            JPanel panel = new JPanel ();
            panel.setLayout ( new BoxLayout ( panel , BoxLayout.X_AXIS ) );
            customScrollPane14.setVerticalScrollBarPolicy ( JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED );
            customScrollPane14.setHorizontalScrollBarPolicy ( JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED );
            customScrollPane14.setViewportView( panel ) ;
            
            double totalMachiningTime = 0.0  ;
            
            for( int j=0; j < machineTime.size() ;  j++){
                        
                JPanel machineAvlPanel = new JPanel();
                machineAvlPanel.setPreferredSize ( new Dimension (100, 65));
                machineAvlPanel.setLayout ( new BoxLayout ( machineAvlPanel , BoxLayout.Y_AXIS ) );

                JLabel jLabel9 = new JLabel() ; 
                JLabel jLabel10 = new JLabel();
                JLabel jLabel11 = new JLabel();

                partId = Integer.parseInt( machineTime.get( j )[0] );
                partQty =   Double.parseDouble( machineTime.get( j )[1] );
                machineName = machineTime.get( j )[2]  ;

                jLabel9.setBackground(new java.awt.Color(51, 51, 51));
                jLabel9.setFont(new java.awt.Font("Leelawadee UI", 1, 13)); // NOI18N
                jLabel9.setForeground(new java.awt.Color(51, 51, 51));
                machineAvlPanel.add(jLabel9);
                jLabel9.setBounds(10, 0, 100, 21);
                jLabel9.setText(  "  "+machineName );

                jLabel10.setBackground(new java.awt.Color(102, 102, 102));
                jLabel10.setFont(new java.awt.Font("Leelawadee UI", 1, 10)); // NOI18N
                jLabel10.setForeground(new java.awt.Color(102, 102, 102));
                machineAvlPanel.add(jLabel10);
                jLabel10.setBounds(10, 22, 100, 17);
                jLabel10.setText( "   "+ df.format( partQty / totalShiftHours ) +" Shifts  "  );

                totalMachiningTime = totalMachiningTime + partQty ;
                
//                jLabel11.setBackground(new java.awt.Color(102, 102, 102));
//                jLabel11.setFont(new java.awt.Font("Leelawadee UI", 1, 10)); // NOI18N
//                jLabel11.setForeground(new java.awt.Color(102, 102, 102));
//                machineAvlPanel.add(   jLabel11  );
//                jLabel11.setBounds(10, 22, 100, 17);
//                jLabel11.setText( "   " +  " Hrs.  "  );

                panel.add( machineAvlPanel ) ;
            }
 
            jLabel20.setText (     df.format( totalMachiningTime/ totalShiftHours )+""+""    ) ;
    }

}
